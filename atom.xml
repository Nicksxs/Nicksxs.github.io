<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nicksxs&#39;s Blog</title>
  <icon>https://nicksxs.me/icon.png</icon>
  <subtitle>What hurts more, the pain of hard work or the pain of regret?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nicksxs.me/"/>
  <updated>2020-06-06T14:41:29.129Z</updated>
  <id>https://nicksxs.me/</id>
  
  <author>
    <name>Nicksxs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>聊聊 Dubbo 的 SPI 续之自适应拓展</title>
    <link href="https://nicksxs.me/2020/06/06/%E8%81%8A%E8%81%8A-Dubbo-%E7%9A%84-SPI-%E7%BB%AD%E4%B9%8B%E8%87%AA%E9%80%82%E5%BA%94%E6%8B%93%E5%B1%95/"/>
    <id>https://nicksxs.me/2020/06/06/%E8%81%8A%E8%81%8A-Dubbo-%E7%9A%84-SPI-%E7%BB%AD%E4%B9%8B%E8%87%AA%E9%80%82%E5%BA%94%E6%8B%93%E5%B1%95/</id>
    <published>2020-06-06T14:39:38.000Z</published>
    <updated>2020-06-06T14:41:29.129Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Adaptive&quot;&gt;&lt;a href=&quot;#Adaptive&quot; class=&quot;headerlink&quot; title=&quot;Adaptive&quot;&gt;&lt;/a&gt;Adaptive&lt;/h2&gt;&lt;p&gt;这个应该是 Dubbo SPI
        
      
    
    </summary>
    
    
      <category term="Java" scheme="https://nicksxs.me/categories/Java/"/>
    
      <category term="Dubbo - RPC - SPI" scheme="https://nicksxs.me/categories/Dubbo-RPC-SPI/"/>
    
      <category term="Dubbo" scheme="https://nicksxs.me/categories/Dubbo/"/>
    
      <category term="SPI" scheme="https://nicksxs.me/categories/Dubbo/SPI/"/>
    
      <category term="Adaptive" scheme="https://nicksxs.me/categories/Dubbo/SPI/Adaptive/"/>
    
    
      <category term="Java" scheme="https://nicksxs.me/tags/Java/"/>
    
      <category term="Dubbo" scheme="https://nicksxs.me/tags/Dubbo/"/>
    
      <category term="RPC" scheme="https://nicksxs.me/tags/RPC/"/>
    
      <category term="SPI" scheme="https://nicksxs.me/tags/SPI/"/>
    
      <category term="Adaptive" scheme="https://nicksxs.me/tags/Adaptive/"/>
    
      <category term="自适应拓展" scheme="https://nicksxs.me/tags/%E8%87%AA%E9%80%82%E5%BA%94%E6%8B%93%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 Dubbo 的 SPI</title>
    <link href="https://nicksxs.me/2020/05/31/%E8%81%8A%E8%81%8A-Dubbo-%E7%9A%84-SPI/"/>
    <id>https://nicksxs.me/2020/05/31/%E8%81%8A%E8%81%8A-Dubbo-%E7%9A%84-SPI/</id>
    <published>2020-05-31T13:06:13.000Z</published>
    <updated>2020-05-31T13:09:38.605Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;SPI全称是Service Provider Interface，咋眼看跟api是不是有点相似，api是application interface，这两个其实在某些方面有类似的地方，也有蛮大的区别，比如我们基于 dubbo
        
      
    
    </summary>
    
    
      <category term="Java" scheme="https://nicksxs.me/categories/Java/"/>
    
      <category term="Dubbo - RPC - SPI" scheme="https://nicksxs.me/categories/Dubbo-RPC-SPI/"/>
    
      <category term="Dubbo" scheme="https://nicksxs.me/categories/Dubbo/"/>
    
      <category term="SPI" scheme="https://nicksxs.me/categories/Dubbo/SPI/"/>
    
    
      <category term="Java" scheme="https://nicksxs.me/tags/Java/"/>
    
      <category term="Dubbo" scheme="https://nicksxs.me/tags/Dubbo/"/>
    
      <category term="RPC" scheme="https://nicksxs.me/tags/RPC/"/>
    
      <category term="SPI" scheme="https://nicksxs.me/tags/SPI/"/>
    
  </entry>
  
  <entry>
    <title>聊聊我刚学会的应用诊断方法</title>
    <link href="https://nicksxs.me/2020/05/22/%E8%81%8A%E8%81%8A%E6%88%91%E5%88%9A%E5%AD%A6%E4%BC%9A%E7%9A%84%E5%BA%94%E7%94%A8%E8%AF%8A%E6%96%AD%E6%96%B9%E6%B3%95/"/>
    <id>https://nicksxs.me/2020/05/22/%E8%81%8A%E8%81%8A%E6%88%91%E5%88%9A%E5%AD%A6%E4%BC%9A%E7%9A%84%E5%BA%94%E7%94%A8%E8%AF%8A%E6%96%AD%E6%96%B9%E6%B3%95/</id>
    <published>2020-05-22T15:26:50.000Z</published>
    <updated>2020-05-24T13:51:43.115Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;因为传说中的出身问题，我以前写的是PHP，在使用 swoole 之前，基本的应用调试手段就是简单粗暴的 var_dump，exit，对于单进程模型的 PHP 也是简单有效，技术栈换成 Java 之后，就变得没那么容易，一方面是需要编译，另一方面是一般都是基于 spring
        
      
    
    </summary>
    
    
      <category term="Java" scheme="https://nicksxs.me/categories/Java/"/>
    
      <category term="Thread dump" scheme="https://nicksxs.me/categories/Thread-dump/"/>
    
      <category term="问题排查" scheme="https://nicksxs.me/categories/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    
      <category term="工具" scheme="https://nicksxs.me/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Java" scheme="https://nicksxs.me/tags/Java/"/>
    
      <category term="Thread dump" scheme="https://nicksxs.me/tags/Thread-dump/"/>
    
  </entry>
  
  <entry>
    <title>聊聊我理解的分布式事务</title>
    <link href="https://nicksxs.me/2020/05/17/%E8%81%8A%E8%81%8A%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <id>https://nicksxs.me/2020/05/17/%E8%81%8A%E8%81%8A%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</id>
    <published>2020-05-17T15:56:01.000Z</published>
    <updated>2020-05-24T14:18:43.082Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;前面说了mysql数据库的事务相关的，那事务是用来干嘛的，这里得补一下ACID，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/ACID&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
      <category term="分布式事务" scheme="https://nicksxs.me/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="两阶段提交" scheme="https://nicksxs.me/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/"/>
    
      <category term="三阶段提交" scheme="https://nicksxs.me/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/"/>
    
    
      <category term="分布式事务" scheme="https://nicksxs.me/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="两阶段提交" scheme="https://nicksxs.me/tags/%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/"/>
    
      <category term="三阶段提交" scheme="https://nicksxs.me/tags/%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/"/>
    
      <category term="2PC" scheme="https://nicksxs.me/tags/2PC/"/>
    
      <category term="3PC" scheme="https://nicksxs.me/tags/3PC/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 mysql 的 MVCC 续续篇之锁分析</title>
    <link href="https://nicksxs.me/2020/05/10/%E8%81%8A%E8%81%8A-mysql-%E7%9A%84-MVCC-%E7%BB%AD%E7%BB%AD%E7%AF%87%E4%B9%8B%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90/"/>
    <id>https://nicksxs.me/2020/05/10/%E8%81%8A%E8%81%8A-mysql-%E7%9A%84-MVCC-%E7%BB%AD%E7%BB%AD%E7%AF%87%E4%B9%8B%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90/</id>
    <published>2020-05-10T01:55:10.000Z</published>
    <updated>2020-05-10T14:26:13.027Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;看完前面两篇水文之后，感觉不得不来分析下 mysql 的锁了，其实前面说到幻读的时候是有个前提没提到的，比如一个&lt;code&gt;select * from table1 where id  = 1&lt;/code&gt;这种查询语句其实是不会加传说中的锁的，当然这里是指在 RR 或者
        
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://nicksxs.me/categories/Mysql/"/>
    
      <category term="C" scheme="https://nicksxs.me/categories/C/"/>
    
      <category term="数据结构" scheme="https://nicksxs.me/categories/Mysql/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="源码" scheme="https://nicksxs.me/categories/Mysql/%E6%BA%90%E7%A0%81/"/>
    
      <category term="Mysql" scheme="https://nicksxs.me/categories/C/Mysql/"/>
    
    
      <category term="mysql" scheme="https://nicksxs.me/tags/mysql/"/>
    
      <category term="数据结构" scheme="https://nicksxs.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="源码" scheme="https://nicksxs.me/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="mvcc" scheme="https://nicksxs.me/tags/mvcc/"/>
    
      <category term="read view" scheme="https://nicksxs.me/tags/read-view/"/>
    
      <category term="gap lock" scheme="https://nicksxs.me/tags/gap-lock/"/>
    
      <category term="next-key lock" scheme="https://nicksxs.me/tags/next-key-lock/"/>
    
      <category term="幻读" scheme="https://nicksxs.me/tags/%E5%B9%BB%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 mysql 的 MVCC 续篇</title>
    <link href="https://nicksxs.me/2020/05/02/%E8%81%8A%E8%81%8A-mysql-%E7%9A%84-MVCC-%E7%BB%AD%E7%AF%87/"/>
    <id>https://nicksxs.me/2020/05/02/%E8%81%8A%E8%81%8A-mysql-%E7%9A%84-MVCC-%E7%BB%AD%E7%AF%87/</id>
    <published>2020-05-02T06:46:35.000Z</published>
    <updated>2020-05-03T14:26:29.291Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;上一篇聊了mysql 的 innodb 引擎基于 read view 实现的 mvcc 和事务隔离级别，可能有些细心的小伙伴会发现一些问题，第一个是在 RC
        
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://nicksxs.me/categories/Mysql/"/>
    
      <category term="C" scheme="https://nicksxs.me/categories/C/"/>
    
      <category term="数据结构" scheme="https://nicksxs.me/categories/Mysql/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="源码" scheme="https://nicksxs.me/categories/Mysql/%E6%BA%90%E7%A0%81/"/>
    
      <category term="Mysql" scheme="https://nicksxs.me/categories/C/Mysql/"/>
    
    
      <category term="mysql" scheme="https://nicksxs.me/tags/mysql/"/>
    
      <category term="数据结构" scheme="https://nicksxs.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="源码" scheme="https://nicksxs.me/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="mvcc" scheme="https://nicksxs.me/tags/mvcc/"/>
    
      <category term="read view" scheme="https://nicksxs.me/tags/read-view/"/>
    
      <category term="gap lock" scheme="https://nicksxs.me/tags/gap-lock/"/>
    
      <category term="next-key lock" scheme="https://nicksxs.me/tags/next-key-lock/"/>
    
      <category term="幻读" scheme="https://nicksxs.me/tags/%E5%B9%BB%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 mysql 的 MVCC</title>
    <link href="https://nicksxs.me/2020/04/26/%E8%81%8A%E8%81%8A-mysql-%E7%9A%84-MVCC/"/>
    <id>https://nicksxs.me/2020/04/26/%E8%81%8A%E8%81%8A-mysql-%E7%9A%84-MVCC/</id>
    <published>2020-04-26T14:14:01.000Z</published>
    <updated>2020-05-02T11:46:21.370Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;很久以前，有位面试官问到，你知道 mysql 的事务隔离级别吗，“额 O__O …，不太清楚”，完了之后我就去网上找相关的文章，找到了这篇&lt;a href=&quot;https://www.cnblogs.com/zhoujinyi/p/3437475.html&quot;
        
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://nicksxs.me/categories/Mysql/"/>
    
      <category term="C" scheme="https://nicksxs.me/categories/C/"/>
    
      <category term="数据结构" scheme="https://nicksxs.me/categories/Mysql/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="源码" scheme="https://nicksxs.me/categories/Mysql/%E6%BA%90%E7%A0%81/"/>
    
      <category term="Mysql" scheme="https://nicksxs.me/categories/C/Mysql/"/>
    
    
      <category term="mysql" scheme="https://nicksxs.me/tags/mysql/"/>
    
      <category term="数据结构" scheme="https://nicksxs.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="源码" scheme="https://nicksxs.me/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="mvcc" scheme="https://nicksxs.me/tags/mvcc/"/>
    
      <category term="read view" scheme="https://nicksxs.me/tags/read-view/"/>
    
  </entry>
  
  <entry>
    <title>redis系列介绍八-淘汰策略</title>
    <link href="https://nicksxs.me/2020/04/18/redis%E7%B3%BB%E5%88%97%E4%BB%8B%E7%BB%8D%E5%85%AB/"/>
    <id>https://nicksxs.me/2020/04/18/redis%E7%B3%BB%E5%88%97%E4%BB%8B%E7%BB%8D%E5%85%AB/</id>
    <published>2020-04-18T15:23:41.000Z</published>
    <updated>2020-04-19T09:28:42.555Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;LRU&quot;&gt;&lt;a href=&quot;#LRU&quot; class=&quot;headerlink&quot; title=&quot;LRU&quot;&gt;&lt;/a&gt;LRU&lt;/h3&gt;&lt;p&gt;说完了过期策略再说下淘汰策略，redis 使用的策略是近似的 lru 策略，为什么是近似的呢，先来看下什么是 lru，看下
        
      
    
    </summary>
    
    
      <category term="Redis" scheme="https://nicksxs.me/categories/Redis/"/>
    
      <category term="数据结构" scheme="https://nicksxs.me/categories/Redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C" scheme="https://nicksxs.me/categories/C/"/>
    
      <category term="源码" scheme="https://nicksxs.me/categories/Redis/%E6%BA%90%E7%A0%81/"/>
    
      <category term="Redis" scheme="https://nicksxs.me/categories/C/Redis/"/>
    
    
      <category term="redis" scheme="https://nicksxs.me/tags/redis/"/>
    
      <category term="数据结构" scheme="https://nicksxs.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="源码" scheme="https://nicksxs.me/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>redis系列介绍七-过期策略</title>
    <link href="https://nicksxs.me/2020/04/12/redis%E7%B3%BB%E5%88%97%E4%BB%8B%E7%BB%8D%E4%B8%83/"/>
    <id>https://nicksxs.me/2020/04/12/redis%E7%B3%BB%E5%88%97%E4%BB%8B%E7%BB%8D%E4%B8%83/</id>
    <published>2020-04-12T13:22:00.000Z</published>
    <updated>2020-04-12T14:57:42.769Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;这一篇不再是数据结构介绍了，大致的数据结构基本都介绍了，这一篇主要是查漏补缺，或者说讲一些重要且基本的概念，也可能是经常被忽略的，很多讲 redis 的系列文章可能都会忽略，学习 redis
        
      
    
    </summary>
    
    
      <category term="Redis" scheme="https://nicksxs.me/categories/Redis/"/>
    
      <category term="数据结构" scheme="https://nicksxs.me/categories/Redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C" scheme="https://nicksxs.me/categories/C/"/>
    
      <category term="源码" scheme="https://nicksxs.me/categories/Redis/%E6%BA%90%E7%A0%81/"/>
    
      <category term="Redis" scheme="https://nicksxs.me/categories/C/Redis/"/>
    
    
      <category term="redis" scheme="https://nicksxs.me/tags/redis/"/>
    
      <category term="数据结构" scheme="https://nicksxs.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="源码" scheme="https://nicksxs.me/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Comparator使用小记</title>
    <link href="https://nicksxs.me/2020/04/05/Comparator%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/"/>
    <id>https://nicksxs.me/2020/04/05/Comparator%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</id>
    <published>2020-04-05T13:41:41.000Z</published>
    <updated>2020-04-05T13:42:20.733Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在Java8的stream之前，将对象进行排序的时候，可能需要对象实现Comparable接口，或者自己实现一个Comparator，&lt;/p&gt;
&lt;p&gt;比如这样子&lt;/p&gt;
&lt;p&gt;我的对象是Entity&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
    
      <category term="Java" scheme="https://nicksxs.me/categories/Java/"/>
    
      <category term="集合" scheme="https://nicksxs.me/categories/Java/%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="https://nicksxs.me/tags/Java/"/>
    
      <category term="Stream" scheme="https://nicksxs.me/tags/Stream/"/>
    
      <category term="Comparator" scheme="https://nicksxs.me/tags/Comparator/"/>
    
      <category term="排序" scheme="https://nicksxs.me/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="sort" scheme="https://nicksxs.me/tags/sort/"/>
    
      <category term="nullsfirst" scheme="https://nicksxs.me/tags/nullsfirst/"/>
    
  </entry>
  
  <entry>
    <title>docker使用中发现的echo命令的一个小技巧及其他</title>
    <link href="https://nicksxs.me/2020/03/29/echo%E5%91%BD%E4%BB%A4%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://nicksxs.me/2020/03/29/echo%E5%91%BD%E4%BB%A4%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2020-03-29T13:48:50.000Z</published>
    <updated>2020-03-29T13:48:50.198Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;最近做 docker 系列，会经常进到 docker 内部，如上一篇介绍的，这些镜像一般都有用 ubuntu 或者alpine 这样的 Linux 系统作为底包，如果构建镜像的时候没有替换源的话，因为你懂的原因，在内部想编辑下东西要安装 vim
        
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://nicksxs.me/categories/Docker/"/>
    
      <category term="Linux" scheme="https://nicksxs.me/categories/Linux/"/>
    
      <category term="命令" scheme="https://nicksxs.me/categories/Linux/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="echo" scheme="https://nicksxs.me/categories/Linux/%E5%91%BD%E4%BB%A4/echo/"/>
    
      <category term="发行版本" scheme="https://nicksxs.me/categories/Docker/%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC/"/>
    
    
      <category term="Docker" scheme="https://nicksxs.me/tags/Docker/"/>
    
      <category term="linux" scheme="https://nicksxs.me/tags/linux/"/>
    
      <category term="echo" scheme="https://nicksxs.me/tags/echo/"/>
    
      <category term="uname" scheme="https://nicksxs.me/tags/uname/"/>
    
      <category term="发行版" scheme="https://nicksxs.me/tags/%E5%8F%91%E8%A1%8C%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>docker比一般多一点的初学者介绍三</title>
    <link href="https://nicksxs.me/2020/03/21/docker%E6%AF%94%E4%B8%80%E8%88%AC%E5%A4%9A%E4%B8%80%E7%82%B9%E7%9A%84%E5%88%9D%E5%AD%A6%E8%80%85%E4%BB%8B%E7%BB%8D%E4%B8%89/"/>
    <id>https://nicksxs.me/2020/03/21/docker%E6%AF%94%E4%B8%80%E8%88%AC%E5%A4%9A%E4%B8%80%E7%82%B9%E7%9A%84%E5%88%9D%E5%AD%A6%E8%80%85%E4%BB%8B%E7%BB%8D%E4%B8%89/</id>
    <published>2020-03-21T06:43:39.000Z</published>
    <updated>2020-03-21T08:19:01.533Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;运行第一个-Dockerfile&quot;&gt;&lt;a href=&quot;#运行第一个-Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;运行第一个 Dockerfile&quot;&gt;&lt;/a&gt;运行第一个 Dockerfile&lt;/h2&gt;&lt;p&gt;上一篇的
        
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://nicksxs.me/categories/Docker/"/>
    
      <category term="介绍" scheme="https://nicksxs.me/categories/Docker/%E4%BB%8B%E7%BB%8D/"/>
    
    
      <category term="Docker" scheme="https://nicksxs.me/tags/Docker/"/>
    
      <category term="namespace" scheme="https://nicksxs.me/tags/namespace/"/>
    
      <category term="Dockerfile" scheme="https://nicksxs.me/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>docker比一般多一点的初学者介绍二</title>
    <link href="https://nicksxs.me/2020/03/15/docker%E6%AF%94%E4%B8%80%E8%88%AC%E5%A4%9A%E4%B8%80%E7%82%B9%E7%9A%84%E5%88%9D%E5%AD%A6%E8%80%85%E4%BB%8B%E7%BB%8D%E4%BA%8C/"/>
    <id>https://nicksxs.me/2020/03/15/docker%E6%AF%94%E4%B8%80%E8%88%AC%E5%A4%9A%E4%B8%80%E7%82%B9%E7%9A%84%E5%88%9D%E5%AD%A6%E8%80%85%E4%BB%8B%E7%BB%8D%E4%BA%8C/</id>
    <published>2020-03-15T14:33:55.000Z</published>
    <updated>2020-03-16T14:16:28.120Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;限制下-docker-的-cpu-使用率&quot;&gt;&lt;a href=&quot;#限制下-docker-的-cpu-使用率&quot; class=&quot;headerlink&quot; title=&quot;限制下 docker 的 cpu 使用率&quot;&gt;&lt;/a&gt;限制下 docker 的 cpu
        
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://nicksxs.me/categories/Docker/"/>
    
      <category term="介绍" scheme="https://nicksxs.me/categories/Docker/%E4%BB%8B%E7%BB%8D/"/>
    
    
      <category term="Docker" scheme="https://nicksxs.me/tags/Docker/"/>
    
      <category term="namespace" scheme="https://nicksxs.me/tags/namespace/"/>
    
      <category term="cgroup" scheme="https://nicksxs.me/tags/cgroup/"/>
    
  </entry>
  
  <entry>
    <title>docker比一般多一点的初学者介绍</title>
    <link href="https://nicksxs.me/2020/03/08/docker%E6%AF%94%E4%B8%80%E8%88%AC%E5%A4%9A%E4%B8%80%E7%82%B9%E7%9A%84%E5%88%9D%E5%AD%A6%E8%80%85%E4%BB%8B%E7%BB%8D/"/>
    <id>https://nicksxs.me/2020/03/08/docker%E6%AF%94%E4%B8%80%E8%88%AC%E5%A4%9A%E4%B8%80%E7%82%B9%E7%9A%84%E5%88%9D%E5%AD%A6%E8%80%85%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-03-08T15:25:40.000Z</published>
    <updated>2020-03-15T12:25:02.990Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;因为最近想搭一个phabricator用来做看板和任务管理，一开始了解这个是Easy大大有在微博推荐过，后来苏洋也在群里和博客里说到了，看上去还不错的样子，因为主角是docker所以就不介绍太多，后面有机会写一下。&lt;/p&gt;
&lt;p&gt;docker最开始是之前在某位大佬的博客看到
        
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://nicksxs.me/categories/Docker/"/>
    
      <category term="介绍" scheme="https://nicksxs.me/categories/Docker/%E4%BB%8B%E7%BB%8D/"/>
    
    
      <category term="Docker" scheme="https://nicksxs.me/tags/Docker/"/>
    
      <category term="namespace" scheme="https://nicksxs.me/tags/namespace/"/>
    
      <category term="cgroup" scheme="https://nicksxs.me/tags/cgroup/"/>
    
  </entry>
  
  <entry>
    <title>寄生虫观后感</title>
    <link href="https://nicksxs.me/2020/03/01/%E5%AF%84%E7%94%9F%E8%99%AB%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>https://nicksxs.me/2020/03/01/%E5%AF%84%E7%94%9F%E8%99%AB%E8%A7%82%E5%90%8E%E6%84%9F/</id>
    <published>2020-03-01T14:56:02.000Z</published>
    <updated>2020-03-01T14:57:29.521Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;寄生虫这部电影在获得奥斯卡之前就有关注了，豆瓣评分很高，一开始看到这个片名以为是像《铁线虫入侵》那种灾难片，后来看到男主，宋康昊，也是老面孔了，从高中时候在学校操场组织看的《汉江怪物》，有点二的感觉，后来在大学寝室电脑上重新看的时候，室友跟我说是韩国国宝级演员，真人不可貌相
        
      
    
    </summary>
    
    
      <category term="生活" scheme="https://nicksxs.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="影评" scheme="https://nicksxs.me/categories/%E7%94%9F%E6%B4%BB/%E5%BD%B1%E8%AF%84/"/>
    
      <category term="2020" scheme="https://nicksxs.me/categories/%E7%94%9F%E6%B4%BB/%E5%BD%B1%E8%AF%84/2020/"/>
    
    
      <category term="生活" scheme="https://nicksxs.me/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="影评" scheme="https://nicksxs.me/tags/%E5%BD%B1%E8%AF%84/"/>
    
      <category term="寄生虫" scheme="https://nicksxs.me/tags/%E5%AF%84%E7%94%9F%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>gogs使用webhook部署react单页应用</title>
    <link href="https://nicksxs.me/2020/02/22/gogs%E4%BD%BF%E7%94%A8webhook%E9%83%A8%E7%BD%B2react%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8/"/>
    <id>https://nicksxs.me/2020/02/22/gogs%E4%BD%BF%E7%94%A8webhook%E9%83%A8%E7%BD%B2react%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8/</id>
    <published>2020-02-22T04:25:25.000Z</published>
    <updated>2020-02-23T09:42:22.035Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;众所周知，我是个前端彩笔，但是也想做点自己可以用的工具页面，所以就让朋友推荐了蚂蚁出品的 ant design，说基本可以直接 ctrl-c ctrl-v，实测对我这种来说还是有点难的，不过也能写点，但是现在碰到的问题是怎么部署到自己的服务器上去&lt;br&gt;用 ant
        
      
    
    </summary>
    
    
      <category term="持续集成" scheme="https://nicksxs.me/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Gogs" scheme="https://nicksxs.me/tags/Gogs/"/>
    
      <category term="Webhook" scheme="https://nicksxs.me/tags/Webhook/"/>
    
  </entry>
  
  <entry>
    <title>Maven实用小技巧</title>
    <link href="https://nicksxs.me/2020/02/16/Maven%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://nicksxs.me/2020/02/16/Maven%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2020-02-16T02:39:42.000Z</published>
    <updated>2020-02-16T06:36:56.046Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Maven 翻译为”专家”、”内行”，是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。&lt;/p&gt;
&lt;p&gt;Maven 是一个项目管理工具，可以对 Java
        
      
    
    </summary>
    
    
      <category term="Java" scheme="https://nicksxs.me/categories/Java/"/>
    
      <category term="Maven" scheme="https://nicksxs.me/categories/Java/Maven/"/>
    
    
      <category term="Java" scheme="https://nicksxs.me/tags/Java/"/>
    
      <category term="Maven" scheme="https://nicksxs.me/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>G1收集器概述</title>
    <link href="https://nicksxs.me/2020/02/09/G1%E6%94%B6%E9%9B%86%E5%99%A8%E6%A6%82%E8%BF%B0/"/>
    <id>https://nicksxs.me/2020/02/09/G1%E6%94%B6%E9%9B%86%E5%99%A8%E6%A6%82%E8%BF%B0/</id>
    <published>2020-02-09T12:52:02.000Z</published>
    <updated>2020-02-09T12:56:16.421Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;G1: The Garbage-First Collector, 垃圾回收优先的垃圾回收器，目标是用户多核 cpu 和大内存的机器，最大的特点就是可预测的停顿时间，官方给出的介绍是提供一个用户在大的堆内存情况下一个低延迟表现的解决方案，通常是 6GB
        
      
    
    </summary>
    
    
      <category term="Java" scheme="https://nicksxs.me/categories/Java/"/>
    
      <category term="JVM" scheme="https://nicksxs.me/categories/Java/JVM/"/>
    
      <category term="C++" scheme="https://nicksxs.me/categories/C/"/>
    
      <category term="GC" scheme="https://nicksxs.me/categories/Java/GC/"/>
    
    
      <category term="Java" scheme="https://nicksxs.me/tags/Java/"/>
    
      <category term="JVM" scheme="https://nicksxs.me/tags/JVM/"/>
    
      <category term="C++" scheme="https://nicksxs.me/tags/C/"/>
    
      <category term="G1" scheme="https://nicksxs.me/tags/G1/"/>
    
      <category term="GC" scheme="https://nicksxs.me/tags/GC/"/>
    
      <category term="Garbage-First Collector" scheme="https://nicksxs.me/tags/Garbage-First-Collector/"/>
    
  </entry>
  
  <entry>
    <title>2019年终总结</title>
    <link href="https://nicksxs.me/2020/02/01/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://nicksxs.me/2020/02/01/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2020-02-01T14:23:53.000Z</published>
    <updated>2020-02-01T14:41:22.608Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;今天是农历初八了，年前一个月的时候就准备做下今年的年终总结，可是写了一点觉得太情绪化了，希望后面写个平淡点的，正好最近技术方面还没有看到一个完整成文的内容，就来写一下这一年的总结，尽量少写一点太情绪化的东西。&lt;/p&gt;
&lt;h3 id=&quot;跳槽&quot;&gt;&lt;a href=&quot;#跳槽&quot;
        
      
    
    </summary>
    
    
      <category term="生活" scheme="https://nicksxs.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="年终总结" scheme="https://nicksxs.me/categories/%E7%94%9F%E6%B4%BB/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
      <category term="2019" scheme="https://nicksxs.me/categories/%E7%94%9F%E6%B4%BB/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/2019/"/>
    
    
      <category term="生活" scheme="https://nicksxs.me/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="年终总结" scheme="https://nicksxs.me/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
      <category term="2019" scheme="https://nicksxs.me/tags/2019/"/>
    
  </entry>
  
  <entry>
    <title>redis数据结构介绍六 快表</title>
    <link href="https://nicksxs.me/2020/01/22/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%E5%85%AD/"/>
    <id>https://nicksxs.me/2020/01/22/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%E5%85%AD/</id>
    <published>2020-01-22T13:51:30.000Z</published>
    <updated>2020-01-26T13:39:57.340Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;这应该是 redis 系列的最后一篇了，讲下快表，其实最前面讲的链表在早先的 redis 版本中也作为 list 的数据结构使用过，但是单纯的链表的缺陷之前也说了，插入便利，但是空间利用率低，并且不能进行二分查找等，检索效率低，ziplist
        
      
    
    </summary>
    
    
      <category term="Redis" scheme="https://nicksxs.me/categories/Redis/"/>
    
      <category term="数据结构" scheme="https://nicksxs.me/categories/Redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="C" scheme="https://nicksxs.me/categories/C/"/>
    
      <category term="源码" scheme="https://nicksxs.me/categories/Redis/%E6%BA%90%E7%A0%81/"/>
    
      <category term="Redis" scheme="https://nicksxs.me/categories/C/Redis/"/>
    
    
      <category term="redis" scheme="https://nicksxs.me/tags/redis/"/>
    
      <category term="数据结构" scheme="https://nicksxs.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="源码" scheme="https://nicksxs.me/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
</feed>
